
import math
import gym
from gym import spaces, logger
from gym.utils import seeding
import numpy as np

class Chopstick():
 
    def __init__(self): #변하지 않는 변수 같은 것은 이곳에 지정
        self.action_space = spaces.Discrete(9)
        self.observation_space = spaces.Box(-high, high, dtype=np.float32)

        self.seed()
        self.state = None

        self.steps_beyond_done = None

    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]
    # 루프 게임을 수행한다
    def step(self, action):
        assert self.action_space.contains(action), "%r (%s) invalid"%(action, type(action))
        state = self.state
        I_r, I_l, O_r, O_l = state
        #각각의 액션의 0~8까지의 행동 지정 
        if action == 0:
            
        elif action == 1:
            
        elif action == 2:
            
        elif action == 3:
        
        elif action == 4:
            
        elif action == 5:
            
        elif action == 6:
            
        elif action == 7:
 
        else:
      
        done =  np.sum(gamestart.hands.po[0]) == 0 \
                or np.sum(gamestart.hands.po[1]) == 0 \
        #done이 게임이 끝나면 True로 바뀐다
        done = bool(done)
        # 안끝나면 둘다 보상 없음 끝나고 내가 이기면 검정이 보상 1 받음 상대가 이기면 보상 -1
        if not done:
            reward = 0
        else:
            if I_win: #
                reward = 1.0
            else:
                reward = -1.0

        return np.array(self.state), reward, done, {}

    #게임을 리셋
    def reset(self):
        self.state = np.ones((2,2)) #원래 상태를 이렇게 돌려놓아 준건데 내가 잘못 넣은 거면 수정 부탁
        return np.array(self.state)


    def close(self):
        if self.viewer:
            self.viewer.close()
            self.viewer = None
